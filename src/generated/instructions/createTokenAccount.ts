/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateTokenAccount
 * @category generated
 */
export const createTokenAccountStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CreateTokenAccountInstructionArgs'
)
/**
 * Accounts required by the _createTokenAccount_ instruction
 *
 * @property [_writable_] tokenAccount
 * @property [] mint
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category CreateTokenAccount
 * @category generated
 */
export type CreateTokenAccountInstructionAccounts = {
  tokenAccount: web3.PublicKey
  mint: web3.PublicKey
  payer: web3.PublicKey
}

export const createTokenAccountInstructionDiscriminator = [
  147, 241, 123, 100, 244, 132, 174, 118,
]

/**
 * Creates a _CreateTokenAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CreateTokenAccount
 * @category generated
 */
export function createCreateTokenAccountInstruction(
  accounts: CreateTokenAccountInstructionAccounts
) {
  const { tokenAccount, mint, payer } = accounts

  const [data] = createTokenAccountStruct.serialize({
    instructionDiscriminator: createTokenAccountInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      '53pUyMnFNBEbpncA5sKZHjmf2bexs2Rk7s7d8no4vVd8'
    ),
    keys,
    data,
  })
  return ix
}
