/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RedeemTwoToken
 * @category generated
 */
export type RedeemTwoTokenInstructionArgs = {
  tokenAmount: beet.bignum
  usdcAmount: beet.bignum
}
/**
 * @category Instructions
 * @category RedeemTwoToken
 * @category generated
 */
export const redeemTwoTokenStruct = new beet.BeetArgsStruct<
  RedeemTwoTokenInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['tokenAmount', beet.u64],
    ['usdcAmount', beet.u64],
  ],
  'RedeemTwoTokenInstructionArgs'
)
/**
 * Accounts required by the _redeemTwoToken_ instruction
 *
 * @property [] tokenData
 * @property [_writable_] tokenMint
 * @property [_writable_] userToken
 * @property [_writable_] userUsdcToken
 * @property [**signer**] user
 * @property [_writable_] reserveUsdcAccount
 * @property [_writable_] earnedUsdcAccount
 * @property [_writable_] treasuryAccount
 * @property [] mint
 * @category Instructions
 * @category RedeemTwoToken
 * @category generated
 */
export type RedeemTwoTokenInstructionAccounts = {
  tokenData: web3.PublicKey
  tokenMint: web3.PublicKey
  userToken: web3.PublicKey
  userUsdcToken: web3.PublicKey
  user: web3.PublicKey
  reserveUsdcAccount: web3.PublicKey
  earnedUsdcAccount: web3.PublicKey
  treasuryAccount: web3.PublicKey
  mint: web3.PublicKey
}

export const redeemTwoTokenInstructionDiscriminator = [
  244, 238, 228, 75, 166, 207, 80, 109,
]

/**
 * Creates a _RedeemTwoToken_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RedeemTwoToken
 * @category generated
 */
export function createRedeemTwoTokenInstruction(
  accounts: RedeemTwoTokenInstructionAccounts,
  args: RedeemTwoTokenInstructionArgs
) {
  const {
    tokenData,
    tokenMint,
    userToken,
    userUsdcToken,
    user,
    reserveUsdcAccount,
    earnedUsdcAccount,
    treasuryAccount,
    mint,
  } = accounts

  const [data] = redeemTwoTokenStruct.serialize({
    instructionDiscriminator: redeemTwoTokenInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: tokenData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: tokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: userToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: userUsdcToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: user,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: reserveUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: earnedUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: treasuryAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'G28ceN5471mPMKhSThZu4tvzK6Skbxrr8qy4abskVsYJ'
    ),
    keys,
    data,
  })
  return ix
}
