/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RedeemOneGenericToken
 * @category generated
 */
export type RedeemOneGenericTokenInstructionArgs = {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category RedeemOneGenericToken
 * @category generated
 */
export const redeemOneGenericTokenStruct = new beet.BeetArgsStruct<
  RedeemOneGenericTokenInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
  ],
  'RedeemOneGenericTokenInstructionArgs'
)
/**
 * Accounts required by the _redeemOneGenericToken_ instruction
 *
 * @property [] genericTokenData
 * @property [] tokenData
 * @property [_writable_] genericTokenMint
 * @property [_writable_] tokenMint
 * @property [_writable_] userToken
 * @property [_writable_] userGenericToken
 * @property [**signer**] user
 * @property [_writable_] genericReserveUsdcAccount
 * @property [_writable_] earnedUsdcAccount
 * @property [_writable_] treasuryAccount
 * @property [] mint
 * @category Instructions
 * @category RedeemOneGenericToken
 * @category generated
 */
export type RedeemOneGenericTokenInstructionAccounts = {
  genericTokenData: web3.PublicKey
  tokenData: web3.PublicKey
  genericTokenMint: web3.PublicKey
  tokenMint: web3.PublicKey
  userToken: web3.PublicKey
  userGenericToken: web3.PublicKey
  user: web3.PublicKey
  genericReserveUsdcAccount: web3.PublicKey
  earnedUsdcAccount: web3.PublicKey
  treasuryAccount: web3.PublicKey
  mint: web3.PublicKey
}

export const redeemOneGenericTokenInstructionDiscriminator = [
  26, 167, 203, 0, 207, 22, 228, 34,
]

/**
 * Creates a _RedeemOneGenericToken_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RedeemOneGenericToken
 * @category generated
 */
export function createRedeemOneGenericTokenInstruction(
  accounts: RedeemOneGenericTokenInstructionAccounts,
  args: RedeemOneGenericTokenInstructionArgs
) {
  const {
    genericTokenData,
    tokenData,
    genericTokenMint,
    tokenMint,
    userToken,
    userGenericToken,
    user,
    genericReserveUsdcAccount,
    earnedUsdcAccount,
    treasuryAccount,
    mint,
  } = accounts

  const [data] = redeemOneGenericTokenStruct.serialize({
    instructionDiscriminator: redeemOneGenericTokenInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: genericTokenData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: tokenData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: genericTokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: userToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: userGenericToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: user,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: genericReserveUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: earnedUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: treasuryAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'G28ceN5471mPMKhSThZu4tvzK6Skbxrr8qy4abskVsYJ'
    ),
    keys,
    data,
  })
  return ix
}
