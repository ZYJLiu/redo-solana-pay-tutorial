/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category NewToken
 * @category generated
 */
export type NewTokenInstructionArgs = {
  name: string
  transactionFee: beet.bignum
  saleFee: beet.bignum
  discount: beet.bignum
  rewardGenericToken: beet.bignum
  rewardMerchantToken: beet.bignum
  rewardUsdcToken: beet.bignum
}
/**
 * @category Instructions
 * @category NewToken
 * @category generated
 */
export const newTokenStruct = new beet.FixableBeetArgsStruct<
  NewTokenInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['name', beet.utf8String],
    ['transactionFee', beet.u64],
    ['saleFee', beet.u64],
    ['discount', beet.u64],
    ['rewardGenericToken', beet.u64],
    ['rewardMerchantToken', beet.u64],
    ['rewardUsdcToken', beet.u64],
  ],
  'NewTokenInstructionArgs'
)
/**
 * Accounts required by the _newToken_ instruction
 *
 * @property [_writable_, **signer**] tokenData
 * @property [_writable_] tokenMint
 * @property [_writable_] earnedUsdcAccount
 * @property [_writable_] reserveUsdcAccount
 * @property [] mint
 * @property [_writable_, **signer**] user
 * @category Instructions
 * @category NewToken
 * @category generated
 */
export type NewTokenInstructionAccounts = {
  tokenData: web3.PublicKey
  tokenMint: web3.PublicKey
  earnedUsdcAccount: web3.PublicKey
  reserveUsdcAccount: web3.PublicKey
  mint: web3.PublicKey
  user: web3.PublicKey
}

export const newTokenInstructionDiscriminator = [
  102, 163, 2, 207, 130, 127, 19, 200,
]

/**
 * Creates a _NewToken_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category NewToken
 * @category generated
 */
export function createNewTokenInstruction(
  accounts: NewTokenInstructionAccounts,
  args: NewTokenInstructionArgs
) {
  const {
    tokenData,
    tokenMint,
    earnedUsdcAccount,
    reserveUsdcAccount,
    mint,
    user,
  } = accounts

  const [data] = newTokenStruct.serialize({
    instructionDiscriminator: newTokenInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: tokenData,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: tokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: earnedUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: reserveUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'G28ceN5471mPMKhSThZu4tvzK6Skbxrr8qy4abskVsYJ'
    ),
    keys,
    data,
  })
  return ix
}
