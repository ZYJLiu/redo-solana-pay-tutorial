/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateMint
 * @category generated
 */
export type CreateMintInstructionArgs = {
  name: string
}
/**
 * @category Instructions
 * @category CreateMint
 * @category generated
 */
export const createMintStruct = new beet.FixableBeetArgsStruct<
  CreateMintInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['name', beet.utf8String],
  ],
  'CreateMintInstructionArgs'
)
/**
 * Accounts required by the _createMint_ instruction
 *
 * @property [_writable_, **signer**] merchant
 * @property [_writable_] mintPda
 * @property [_writable_, **signer**] user
 * @category Instructions
 * @category CreateMint
 * @category generated
 */
export type CreateMintInstructionAccounts = {
  merchant: web3.PublicKey
  mintPda: web3.PublicKey
  user: web3.PublicKey
}

export const createMintInstructionDiscriminator = [
  69, 44, 215, 132, 253, 214, 41, 45,
]

/**
 * Creates a _CreateMint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateMint
 * @category generated
 */
export function createCreateMintInstruction(
  accounts: CreateMintInstructionAccounts,
  args: CreateMintInstructionArgs
) {
  const { merchant, mintPda, user } = accounts

  const [data] = createMintStruct.serialize({
    instructionDiscriminator: createMintInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: merchant,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: mintPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      '53pUyMnFNBEbpncA5sKZHjmf2bexs2Rk7s7d8no4vVd8'
    ),
    keys,
    data,
  })
  return ix
}
