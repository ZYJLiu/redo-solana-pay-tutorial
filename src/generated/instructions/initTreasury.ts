/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitTreasury
 * @category generated
 */
export const initTreasuryStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'InitTreasuryInstructionArgs'
)
/**
 * Accounts required by the _initTreasury_ instruction
 *
 * @property [_writable_] treasuryUsdcAccount
 * @property [] mint
 * @property [_writable_, **signer**] user
 * @category Instructions
 * @category InitTreasury
 * @category generated
 */
export type InitTreasuryInstructionAccounts = {
  treasuryUsdcAccount: web3.PublicKey
  mint: web3.PublicKey
  user: web3.PublicKey
}

export const initTreasuryInstructionDiscriminator = [
  105, 152, 173, 51, 158, 151, 49, 14,
]

/**
 * Creates a _InitTreasury_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitTreasury
 * @category generated
 */
export function createInitTreasuryInstruction(
  accounts: InitTreasuryInstructionAccounts
) {
  const { treasuryUsdcAccount, mint, user } = accounts

  const [data] = initTreasuryStruct.serialize({
    instructionDiscriminator: initTreasuryInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: treasuryUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'G28ceN5471mPMKhSThZu4tvzK6Skbxrr8qy4abskVsYJ'
    ),
    keys,
    data,
  })
  return ix
}
